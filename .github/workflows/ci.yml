name: CI

on:
  push:
    branches: ["main", "branch-3(HW_35.2-)"]

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis
        ports:
          - 6379:6379
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: '1.5.1'

      - name: Install dependencies
        run: poetry install --no-root

      - name: Run tests
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
          CELERY_BROKER_URL: ${{ secrets.CELERY_BROKER_URL_FOR_TEST }}
          CELERY_RESULT_BACKEND: ${{ secrets.CELERY_RESULT_BACKEND_FOR_TEST }}
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
        run: poetry run python manage.py test

      - name: Coverage tests
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
          CELERY_BROKER_URL: ${{ secrets.CELERY_BROKER_URL_FOR_TEST }}
          CELERY_RESULT_BACKEND: ${{ secrets.CELERY_RESULT_BACKEND_FOR_TEST }}
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
        run: |
          poetry run coverage run --source='.' manage.py test
          poetry run coverage report

  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Login in DockerHub
        run: echo ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }} | docker login -u ${{ secrets.DOCKER_HUB_USER_NAME }} --password-stdin

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_HUB_USER_NAME }}/MMV:${{ github.sha }} .

      - name: Push Docker image in DockerHub
        run: |
          docker tag ${{ secrets.DOCKER_HUB_USER_NAME }}/MMV:${{ github.sha }} ${{ secrets.DOCKER_HUB_USER_NAME }}/MMV:latest
          docker push ${{ secrets.DOCKER_HUB_USER_NAME }}/MMV:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
        - name: Set up SSH
          uses: webfactory/ssh-agent@v0.9.0
          with:
            ssh-private-key: ${{ secrets.SSH_KEY }}

        - name: Check out code
          uses: actions/checkout@v3

        - name: Create .env file
          uses: SpicyPizza/create-envfile@v2
          with:
            envkey_SECRET_KEY: ${{ secrets.SECRET_KEY }}
            envkey_POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
            envkey_POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
            envkey_POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
            envkey_POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
            envkey_CELERY_BROKER_URL: ${{ secrets.CELERY_BROKER_URL }}
            envkey_CELERY_RESULT_BACKEND: ${{ secrets.CELERY_RESULT_BACKEND }}
            envkey_TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}

        - name: Deploy to server
          run: |
            ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} "sudo mkdir -p /MMV" || false
            scp -o StrictHostKeyChecking=no docker-compose.yml ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:/MMV
            scp -o StrictHostKeyChecking=no nginx.conf ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:/MMV
            scp -o StrictHostKeyChecking=no .env ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:/MMV
            ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << EOF
            cd /MMV
            docker-compose pull
            docker-compose down --remove-orphans || true
            docker-compose up -d --force-recreate
            EOF